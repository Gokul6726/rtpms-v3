<html>
  <head>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta1/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta1/dist/js/bootstrap.bundle.min.js">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/boxicons@latest/css/boxicons.min.css">
    <link rel="stylesheet" href="/static/style.css">
    <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
    <title>Stats</title>

  </head>
  <body id="body-pd">
    <header class="header" id="header">
        <div class="header_toggle"> <i class='bx bx-menu' id="header-toggle"></i> </div>
        <!-- <div class="header_img"> <img src="https://i.imgur.com/hczKIze.jpg" alt=""> </div> -->
    </header>
    <div class="l-navbar" id="nav-bar">
        <nav class="nav">
            <div> <a href="#" class="nav_logo"> <i class='bx bx-layer nav_logo-icon'></i> <span class="nav_logo-name">IPMS</span> </a>
                <div class="nav_list">
                <a href="/route/dashboard" class="nav_link"> <i class='bx bx-grid-alt nav_icon'></i> <span class="nav_name">Dashboard</span> </a>
                <a href="/route/patient" class="nav_link"> <i class='bx bx-user nav_icon'></i> <span class="nav_name">Patients</span> </a>
                 <!-- <a href="#" class="nav_link"> <i class='bx bx-user nav_icon'></i> <span class="nav_name">Users</span> </a>
                 <a href="#" class="nav_link"> <i class='bx bx-message-square-detail nav_icon'></i> <span class="nav_name">Messages</span> </a>
                 <a href="#" class="nav_link"> <i class='bx bx-bookmark nav_icon'></i> <span class="nav_name">Bookmark</span> </a>
                 <a href="#" class="nav_link"> <i class='bx bx-folder nav_icon'></i> <span class="nav_name">Files</span> </a>  -->
                 <a href="/route/stats" class="nav_link active"> <i class='bx bx-bar-chart-alt-2 nav_icon'></i> <span class="nav_name">Stats</span> </a>
                </div>
            </div>
        <a href="/route/logout" class="nav_link"> <i class='bx bx-log-out nav_icon'></i> <span class="nav_name">SignOut</span> </a>
        </nav>
    </div>
    <!--Container Main start-->
    <div class="height-100 bg-light">
        <h4>Patient Stats</h4>
        <br>
        <h4>Patient :</h4>
        <select class="form-select" aria-label="Default select example" id="patientNo">
          <!-- <option selected>Open this select menu</option> -->
          <option value="1943514">One</option>
          <option value="1943517">Two</option>
          <option value="1943526">Three</option>
        </select>
        <br>
          <div class="form-group mx-sm-3 mb-2">
            <label for="inputnumber" class="sr-only">Last</label>
            <input type="number"  id="inputnumber" value="10">
            <label for="inputnumber" class="sr-only">Values :</label>
            <p id="demo"></p>
            <p id="demo2"></p>
          </div>
        <br>
        <div id="plot"></div>
        <br>
        <div id="plot2"></div>
        <br>
        <div id="plot3"></div>
        <br>


        
    </div>
    <!--Container Main end-->
    <script>
        document.addEventListener("DOMContentLoaded", function(event) {

const showNavbar = (toggleId, navId, bodyId, headerId) =>{
const toggle = document.getElementById(toggleId),
nav = document.getElementById(navId),
bodypd = document.getElementById(bodyId),
headerpd = document.getElementById(headerId)

// Validate that all variables exist
if(toggle && nav && bodypd && headerpd){
toggle.addEventListener('click', ()=>{
// show navbar
nav.classList.toggle('show')
// change icon
toggle.classList.toggle('bx-x')
// add padding to body
bodypd.classList.toggle('body-pd')
// add padding to header
headerpd.classList.toggle('body-pd')
})
}
}

showNavbar('header-toggle','nav-bar','body-pd','header')

/*===== LINK ACTIVE =====*/
const linkColor = document.querySelectorAll('.nav_link')

function colorLink(){
if(linkColor){
linkColor.forEach(l=> l.classList.remove('active'))
this.classList.add('active')
}
}
linkColor.forEach(l=> l.addEventListener('click', colorLink))

// Your code to run since DOM is loaded and ready
});
    </script>

<script>
  // Retrieve data from ThingSpeak


  function getData() {
    var x = document.getElementById("inputnumber").value;
    document.getElementById("demo").innerHTML = x;
    var channel = document.getElementById("patientNo").value;
    document.getElementById("demo").innerHTML = channel;
    // var x = 10;
    var url = 'https://api.thingspeak.com/channels/'+channel+'/feeds.json?results='+ x;
    var xhttp = new XMLHttpRequest();
    xhttp.onreadystatechange = function() {
      if (this.readyState == 4 && this.status == 200) {
        // Parse the data
        var data = JSON.parse(this.responseText);
        var timestamps = [];
        var values = [];
        var values2 = [];
        var values3 = [];
        for (var i = 0; i < data.feeds.length; i++) {
          timestamps.push(data.feeds[i].created_at);
          values.push(data.feeds[i].field1);
          values2.push(data.feeds[i].field2);
          values3.push(data.feeds[i].field3);
        }
        // Plot the data
        var trace = {
          x: timestamps,
          y: values,
          type: 'scatter'
        };
        var trace2 = {
          x: timestamps,
          y: values2,
          type: 'scatter'
        };
        var trace3 = {
          x: timestamps,
          y: values3,
          type: 'scatter'
        };
        var layout = {
          title: 'Pulse',
          xaxis: {
            title: 'Timestamp'
          },
          yaxis: {
            title: 'Value'
          }
        };
        var layout2 = {
          title: 'SpO2',
          xaxis: {
            title: 'Timestamp'
          },
          yaxis: {
            title: 'Value'
          }
        };
        var layout3 = {
          title: 'Temperature',
          xaxis: {
            title: 'Timestamp'
          },
          yaxis: {
            title: 'Value'
          }
        };
        Plotly.newPlot('plot', [trace], layout);
        Plotly.newPlot('plot2', [trace2], layout2);
        Plotly.newPlot('plot3', [trace3], layout3);
      }
    };
    xhttp.open("GET", url, true);
    xhttp.send();
  }

  // Update plot at user-defined interval
  setInterval(getData, 5000); // Update every 5 seconds

</script>
</body>
  <!-- <body>
    <h1>Patient 1</h1>
    <div id="plot"></div>
    <br>
    <div id="plot2"></div>
    <br>
    <div id="plot3"></div>
  </body> -->
</html>
